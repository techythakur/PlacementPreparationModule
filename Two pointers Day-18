SQUARES OF A SORTED ARRAY (JAVA):
class Solution {
    public int[] sortedSquares(int[] nums) {

        int[] squares = new int[nums.length];

        int left = 0, right = nums.length - 1;
        for (int i = squares.length - 1; i >= 0; i--) {
            if (Math.abs(nums[left]) > Math.abs(nums[right])) {
                squares[i] = nums[left] * nums[left];
                left += 1;
            }
            else {
                squares[i] = nums[right] * nums[right];
                right -= 1;
            }
        }
        return squares;
    }
}
OR
class Solution {
    public int[] sortedSquares(int[] nums) {
          for(int i=0;i<nums.length;i++){
              
              nums[i]=(int)Math.pow(nums[i],2);
          }
        Arrays.sort(nums);
        return nums;
    }
}

ROTATE ARRAY (JAVA):
class Solution {
    public void rotate(int[] nums, int k) {
        k=k%nums.length;
        reverse(nums,nums.length-k,nums.length-1);
        reverse(nums,0,nums.length-k-1);
        reverse(nums,0,nums.length-1);         
    }
    public void reverse(int[] nums,int i,int j)
    {
        while(i<=j)
        {
            int temp=nums[i];
            nums[i]=nums[j];
            nums[j]=temp;
            i++;
            j--;
            
        }
    }
 }
 OR
 class Solution {
    public void rotate(int[] nums, int k) 
    {
         if (k==0) return;
   if (nums == null || nums.length == 0) return;
   
   int[] res = new int[nums.length];
   for (int i=0; i<nums.length; i++) {
      int newIndex = (i + k) % nums.length;
      res[newIndex] = nums[i];
   }
   for (int i=0; i<nums.length; i++) 
      nums[i] = res[i];
    }
}
OR
class Solution {
    public void rotate(int[] nums, int k) {
          Stack<Integer> stack=new Stack<>();
        k=k%nums.length;
        for(int i=nums.length-k;i<nums.length;i++)
        {
            stack.push(nums[i]);
        }
        for(int i=0;i<nums.length-k;i++)
        {
            stack.push(nums[i]);
        }
        for(int i=nums.length-1;i>=0;i--)
        {
            nums[i]=stack.pop();
        }
    }
}
