01 MATRIX (JAVA):
class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int m = mat.length, n = mat[0].length;
        int[][] ans = new int[m][n];
        for(int i = 0; i<m; i++){
            for(int j = 0; j<n; j++){
                if(mat[i][j] == 0){
                    ans[i][j] = 0; 
                }
                else{
                    ans[i][j] = 10000;
        
                    if(i != 0){
                        ans[i][j] = Math.min(ans[i - 1][j] + 1, ans[i][j]);
                    }
                    
                    if(j != 0)
                        ans[i][j] = Math.min(ans[i][j - 1] + 1, ans[i][j]); 
                } 
            }  
        }
        for(int i = m - 1; i>=0; i--){
            for(int j = n - 1; j>= 0; j--){
                if(ans[i][j] != 0){
                    //down
                    if(i != m - 1){
                        ans[i][j] = Math.min(ans[i + 1][j] + 1, ans[i][j]);  
                    }
                    //right
                    if(j != n - 1){
                        ans[i][j] = Math.min(ans[i][j + 1] + 1, ans[i][j]);
                    } 
                }     
            } 
        }    
        return ans;
    }
}

ROTTING ORANGES (JAVA):
class Solution {
    public int orangesRotting(int[][] grid) {
         int days = 2;
  boolean flag = false;
  int n = grid.length;
  int m = grid[0].length;
  while (true) {
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < m; j++) {
        if (grid[i][j] == days) {
          if (isSafe(grid, i + 1, j) && grid[i + 1][j] == 1) {
            grid[i + 1][j] = grid[i][j] + 1;
            flag = true;
          }
          if (isSafe(grid, i, j + 1) && grid[i][j + 1] == 1) {
            grid[i][j + 1] = grid[i][j] + 1;
            flag = true;
          }
          if (isSafe(grid, i - 1, j) && grid[i - 1][j] == 1) {
            grid[i - 1][j] = grid[i][j] + 1;
            flag = true;
          }
          if (isSafe(grid, i, j - 1) && grid[i][j - 1] == 1) {
            grid[i][j - 1] = grid[i][j] + 1;
            flag = true;
          }
        }
      }
    }
    if (flag == false)
      break;
    flag = false;
    days++;
  }
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      if (grid[i][j] == 1) {
        days = -1;
      }
    }
  }
  return days == -1 ? days : days - 2;
    }

public static boolean isSafe(int[][] grid, int i, int j) {
  int n = grid.length;
  int m = grid[0].length;
  return (i >= 0 && j >= 0 && i < n && j < m);
    }
}
