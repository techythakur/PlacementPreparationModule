FLOOD FILL (JAVA):
class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        if(image[sr][sc] == color){
            return image;
        }
        floodFill(image,sr,sc,image[sr][sc], color);
        return image;
    }
    
    public static void floodFill(int[][] image, int i, int j, int oldColor, int newColor){
        if(i<0 || i>=image.length || j<0 || j>=image[0].length || image[i][j] != oldColor){
            return;
        }
        
        image[i][j] = newColor;
        
        floodFill(image, i+1, j, oldColor, newColor);
        floodFill(image, i-1, j, oldColor, newColor);
        floodFill(image, i, j+1, oldColor, newColor);
        floodFill(image, i, j-1, oldColor, newColor);
        
    }    
}

MAX AREA OF THE ISLAND (JAVA):
class Solution {
    int maxArea=0;
    int countArea=0;
    public void markLand(int i,int j,int[][]grid){
        if(i<0||i>=grid.length||j<0||j>=grid[0].length||grid[i][j]!=1)
            return;
        grid[i][j]=0;    //VISITED BLOCKS
		
        countArea++;    //count the area
		//move horizontaly and vertically
        markLand(i+1,j,grid);
        markLand(i,j+1,grid);
        markLand(i-1,j,grid);
        markLand(i,j-1,grid);
    }
    public int maxAreaOfIsland(int[][] grid) {
        
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==1){            //visiting the 1st block of the 
                    countArea=0;
                    markLand(i,j,grid);      //start to mark the visited blocks 
                }
                if(maxArea<countArea){          
                    maxArea=countArea;
                }
            }
        }
        return maxArea;
    }
}
