BINARY SEARCH (JAVA):
class Solution {
    public int search(int[] nums, int target) {
      int l=0,u=nums.length-1;
      int mid;
        while(l<=u){
            mid=(int)((l+u)*0.5);
            if(nums[mid]==target)
                return mid;
            else if(nums[mid]<target)
                l=mid+1;
            else
                u=mid-1;
        }
        return -1;
    }
}

FIRST BAD VERSION (JAVA):
/* The isBadVersion API is defined in the parent class VersionControl.
      boolean isBadVersion(int version); */

public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
    int beg,last,mid;
        beg = 1 ; last = n;
        int pos = 1;
        while(beg<=last)
        {
            mid = beg + (last-beg)/2;
            boolean x = isBadVersion(mid);
            if(x == true){
                pos = mid;
                last = mid-1;
            }
            else
                beg = mid+1;
        }
   return pos; // return the first index of faulty product
    }
}

SEARCH INSERT POSITION (JAVA):
class Solution {
    public int searchInsert(int[] nums, int target) {
    int i=0; 
    int j=nums.length-1;

    while(i<=j)
    {
        int mid = (i+j)/2;
        if(target > nums[mid])
            i=mid+1;
        else if(target < nums[mid])
            j=mid-1;
        else
            return mid;
    }
    return i;
    }
}
