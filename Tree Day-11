BINARY TREE PREORDER TRAVERSAL (JAVA):
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        preorderTraversalHelper(list, root);
        return list;
    }

    private void preorderTraversalHelper(List<Integer> list, TreeNode root) {
        if (root != null) {
            list.add(root.val);
            preorderTraversalHelper(list, root.left);
            preorderTraversalHelper(list, root.right);
        }
    }
}
OR
public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}
 
public class Solution {
    public ArrayList<Integer> preorderTraversal(TreeNode root) {
        ArrayList<Integer> returnList = new ArrayList<Integer>();
 
        if(root == null)
            return returnList;
 
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.push(root);
        while(!stack.empty()){
            TreeNode n = stack.pop();
            returnList.add(n.val);
 
            if(n.right != null)
                stack.push(n.right);
            if(n.left != null)
                stack.push(n.left);
        }
        return returnList;
    }
}

BINARY TREE INORDER TRAVERSAL (JAVA):
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        inorderTraversalHelper(list, root);
        return list;
    }

    private void inorderTraversalHelper(List<Integer> list, TreeNode root) {
        if (root != null) {
            inorderTraversalHelper(list, root.left);
            list.add(root.val);
            inorderTraversalHelper(list, root.right);
        }
    }
} 

BINARY TREE POSTORDER TRAVERSAL (JAVA):
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        postorderTraversalHelper(list, root);
        return list;
    }

    private void postorderTraversalHelper(List<Integer> list, TreeNode root) {
        if (root != null) {   
            postorderTraversalHelper(list, root.left);
            postorderTraversalHelper(list, root.right);
            list.add(root.val);
        }
    }
} 
