VALID PARENTHESIS (JAVA):
class Solution {
    public boolean isValid(String s) {
    Stack<Character> stack = new Stack<>();
    for(int i =0; i < s.length(); i++)
    {
       Character currentChar = s.charAt(i);
       if (currentChar == '(' || currentChar == '{' || currentChar == '[') 
            stack.push(currentChar);
       else if(!stack.isEmpty())
       {
           if (currentChar == ')' && stack.peek() == '(' 
            || (currentChar == '}' && stack.peek() == '{')
            || (currentChar == ']' && stack.peek() == '[')) 
                stack.pop();
           else
                return false;
       } 
        else         
           return false;   
    }
    return stack.isEmpty();  
    }
}

IMPLEMENT QUEUE USING STACK (JAVA):
class MyQueue {
     Stack<Integer> stack;
     Stack<Integer> revStack;
  public MyQueue() 
  {
    stack = new Stack<>();
    revStack = new Stack<>();
  }

  public void push(int x) 
  {
    stack.push(x);
  }

  public int pop() 
  {
    while (!stack.isEmpty()) 
      revStack.push(stack.pop());
    
    int num = revStack.pop();
    while (!revStack.isEmpty()) 
      stack.push(revStack.pop());
    
    return num;
  }

  public int peek() {
    while (!stack.isEmpty()) 
      revStack.push(stack.pop());

    int num = revStack.peek();
    while (!revStack.isEmpty()) 
      stack.push(revStack.pop());
    
    return num;
  }

  public boolean empty() {
    return stack.isEmpty();
  }
}
