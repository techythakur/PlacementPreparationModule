INVERT A BINARY TREE (JAVA):
class Solution {
    public TreeNode invertTree(TreeNode root) {
     if(root==null)
        return root;
 
    TreeNode t = root.left;
    root.left = root.right;
    root.right = t;
    invertTree(root.left);
    invertTree(root.right);
 
    return root;   
    }
}

PATH SUM (JAVA):
class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
       if(root == null) return false;
 
        LinkedList<TreeNode> nodes = new LinkedList<TreeNode>();
        LinkedList<Integer> values = new LinkedList<Integer>();
 
        nodes.add(root);
        values.add(root.val);
 
        while(!nodes.isEmpty()){
            TreeNode curr = nodes.poll();
            int sumValue = values.poll();        
 
            if(curr.left == null && curr.right == null && sumValue==sum)
                return true;
 
            if(curr.left != null)
            {
                nodes.add(curr.left);
                values.add(sumValue+curr.left.val);
            }
 
            if(curr.right != null)
            {
                nodes.add(curr.right);
                values.add(sumValue+curr.right.val);
            }
        }
 
        return false;  
    }
}
