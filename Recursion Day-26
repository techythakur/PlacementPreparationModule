COMBINATIONS (JAVA):
class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> ans = new ArrayList<>(); solve(1,n,ans,new ArrayList<Integer>(),k); // here instead of passing 0 as the index we pass 1 as the starting number
        return ans;
    }
    public void solve(int start,int n,List<List<Integer>> ans,ArrayList<Integer> temp,int k){   if(k==0){//when the k elements are added into the data structure we add temp to ans and return
            ans.add(new ArrayList<>(temp)); 
            return;
        }
        for(int i=start;i<=n;i++){
            temp.add(i);
            solve(i+1,n,ans,temp,k-1);
            temp.remove(temp.size()-1);
        }
    }
}

PERMUTATIONS (JAVA):
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        permutations(0, nums, ans);
        return ans;
    }
    
    private void swap(int i, int j, int []nums){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    
    public void permutations(int index, int []nums, List<List<Integer>> ans){
        if(index == nums.length){
            List<Integer> list = new ArrayList<>();
            for(int i = 0; i < nums.length; i++){
                list.add(nums[i]);
            }
            ans.add(new ArrayList<>(list));
            return;
        }        
        for(int i = index; i < nums.length; i++){
            swap(i, index, nums);
            permutations(index + 1, nums, ans);
            swap(i, index, nums);
        }
    }
}

LETTER CASE PERMUTATION (JAVA):
class Solution {
    public List<String> letterCasePermutation(String s) {
        List<String> ans = new ArrayList<>();
        findPermutations(s, "", ans);
        return ans;
    }
    public void findPermutations(String input, String temp, List<String> ans) {
        if(input.length() == 0) {
            ans.add(temp);
            return;
        }
        char ch = input.charAt(0);
        if(Character.isDigit(ch))
            findPermutations(input.substring(1), temp + ch, ans);
        else{
            findPermutations(input.substring(1), temp + Character.toLowerCase(ch), ans);
            findPermutations(input.substring(1), temp + Character.toUpperCase(ch), ans);
        }
        return;
    }
}
